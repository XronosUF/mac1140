## -*- encoding: utf-8 -*-
## This file (solvingExponentialLogs-Practice1.sagetex.sage) was *autogenerated* from solvingExponentialLogs-Practice1.tex with sagetex.sty version 2019/01/09 v3.2.
import sagetex
_st_ = sagetex.SageTeXProcessor('solvingExponentialLogs-Practice1', version='2019/01/09 v3.2', version_check=True)
_st_.current_tex_line = 1
_st_.blockbegin()
try:
 
 ######  Define a function to convert a sage number into a saved counter number.
 
 def setCounter(counterName, counterValue, fileName = 'counters.tex'):
     file1 = open(fileName, 'w')
     counterString = str(r'\setcounter{' + str(counterName) + '}{'+ str(counterValue) +'}')
     commandString = str('\\newcommand{\\' + str(counterName) + '}{'+ str(counterValue) +'}')
     file1.write(counterString + "\n" + commandString + "\n")
     # more "string# =" and "file#.write()" as desired.
 
 
 
 #####Define default Sage variables.
 #Default function variables
 var('x,y,z,X,Y,Z')
 #Default function names
 var('f,g,h,dx,dy,dz,dh,df')
 #Default Wild cards
 w0 = SR.wild(0)
 
 def DispSign(b):
     """ Returns the string of the 'signed' version of `b`, e.g. 3 -> "+3", -3 -> "-3", 0 -> "".
     """
     if b == 0:
         return ""
     elif b > 0:
         return "+" + str(b)
     elif b < 0:
         return str(b)
     else:
         # If we're here, then something has gone wrong.
         raise ValueError
 
 def ISP(b):
     return DispSign(b)
 
 def NoEval(f, c):
     # TODO
     """ Returns a non-evaluted version of the result f(c).
     """
     cStr = str(c)
     # fLatex = latex(f)
     fString = latex(f)
     fStrList = list(fString)
     length = len(fStrList)
     fStrList2 = range(length)
     for i in range(0, length):
         if fStrList[i] == "x":
             fStrList2[i] = "("+cstr+")"
         else:
             fStrList2[i] = fStrList[i]
     f2 = join(fStrList2,"")
     return LatexExpr(f2)
 
 def HyperSimp(f):
     """ Returns the expression `f` without hyperbolic expressions.
     """
     subsDict = {
         sinh(w0) : (exp(w0) - exp(-w0))/2,
         cosh(w0) : (exp(w0) + exp(-w0))/2,
         tanh(w0) : (exp(w0) - exp(-w0))/(exp(w0) + exp(-w0)),
         sech(w0) : 2/(exp(w0) + exp(-w0)),                      # This seems to work, but Nowell said it didn't at one point.
         csch(w0) : 2/(exp(w0) - exp(-w0)),                      # This seems to work, but Nowell said it didn't at one point.
         coth(w0) : (exp(w0) + exp(-w0))/(exp(w0) - exp(-w0)),   # This seems to work, but Nowell said it didn't at one point.
         arcsinh(w0) :       ln( w0 + sqrt((w0)^2 + 1) ),
         arccosh(w0) :       ln( w0 + sqrt((w0)^2 - 1) ),
         arctanh(w0) : 1/2 * ln( (1 + w0) / (1 - w0) ),
         arccsch(w0) :       ln( (1 + sqrt((w0)^2 + 1))/w0 ),
         arcsech(w0) :       ln( (1 + sqrt(1 - (w0)^2))/w0 ),
         arccoth(w0) : 1/2 * ln( (1 + w0) / (w0 - 1) )
     }
     g = f.substitute(subsDict)
     return simplify(g)
 
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [0]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 #def RandAng(s,t):
 #    """ Returns a random nice angle in [0,2*pi] which lies in [`s`,`t`].
 #    """
 #    angles = [i*pi/6 for i in range(0,13)] + [(2*i+1)*pi/4 for i in range(0,4)]
 #    while True:
 #        angle = choice(angles) # Picks a random element.
 #        if s <= angle <= t:
 #            return simplify(angle)
 
 def RandPoly(degree, zeroes=[], avoid=[], monic=False, expanded=False):
     """Note: If you want a polynomial of degree 4 with a zero at x=3 of
     multiplicity 2, for example, you should call
     >>> RandPoly(4, zeroes = [3,3], avoid = [3])
     (x-3)^2*(x+1)*(x-5)
     """
     RP_missingDegree = degree - len(zeroes)
     assert RP_missingDegree >= 0, "Can't have degree {} with all those zeroes! {}".format(degree,zeroes)
     # First, compute the part that has the specified zeroes.
     if monic:
         RP_myRandomPoly = prod((x-RP_zero) for RP_zero in zeroes)
     else:
         RP_myRandomPoly = prod((RP_zero.denominator()*x - RP_zero.numerator()) for RP_zero in zeroes)
     # Second, compute the missing factor.
     if avoid:
         RP_missingZeroes =[NonZeroInt(-10,10,avoid) for RP_ in range(RP_missingDegree)]
         RP_missingFactor = prod((x-RP_missingZero) for RP_missingZero in RP_missingZeroes)
     else:
         if monic:
             RP_missingFactor = x**RP_missingDegree
         else:
             RP_missingFactor = NonZeroInt(-10,10)*x**RP_missingDegree
 
         for RP_i in range(0,RP_missingDegree):
             RP_missingFactor += RandInt(-10,10)*x**RP_i
     RP_myRandomPoly *= RP_missingFactor
     if expanded:
         RP_myRandomPoly = expand(RP_myRandomPoly)
     return RP_myRandomPoly
 
 def RandRational(c,d):
     """ Returns a random rational function with numerator and denominator of degrees `c` and `d` resp.
     """
     num_zeros = [RandInt(-10,10) for _ in range(c)] # Zeroes of the numerator
     num = RandPoly(c,zeroes=num_zeroes) # Numerator
     den = RandPoly(d,avoid =num_zeroes) # Denominator
     return num/den
 
 def saneCheck(a,b = 1000):
     """ A function to check the reasonable-ness of an answer. It checks the
         numerator and denominator to see if they are reasonable numbers. `a` is
         the input number to check, and b is the threshold you want the numerator
         and denominator (if present) to be below. Default is 1000. Thus 1/596
         would pass, 5419/209 would not.
     """
     aTemp = abs(a/(7919*7907*6883)) # I need to force a denominator. Odds are, whatever you're checking won't have all these primes as factors. If they do, then you have fucked up royally anyway. Also take absolute value in order to test magnitude of values.
     # Initialize answer to -1 to detect if anything happened.
     check = -1
     if aTemp.numerator() > b or aTemp.denominator() > (b*7919*7907*6883):
         check = 0
     else:
         check = 1
     return check
 
 def RandVector(b, c, avoid=[], rep=1):
     """ Returns essentially a multiset permutation of ([b,c]-av) * rep.
         That is, a vector which contains each integer in [`b`,`c`] which is not in `av` a total of `rep` number of times.
         Example:
         sage: RandVector(1,3, [2], 2)
         [3, 1, 1, 3]
     """
     oneVec = [val for val in range(b,c+1) if val not in avoid]
     vec = oneVec * rep
     shuffle(vec)
     return vec
 
 def RandMatrix(dim1, dim2, LBnum,UBnum,LBden,UBden):
     """ Returns a random matrix with rational entries.
         The final four parameters specify lower and upper bounds for the
         numerators and denominators of the entries.
     """
     temp = matrix(QQ, dim1, dim2, 0)
     for i in range(dim1):
         for j in range(dim2):
             num = RandInt(LBnum, UBnum)
             den = NonZeroInt(LBden, UBden)
             temp[i,j] = num/den
     return temp
 
except:
 _st_.goboom(179)
_st_.blockend()
_st_.current_tex_line = 9
_st_.blockbegin()
try:
 
 ###### Problem p1
 p1b1 = RandInt(2,7)
 
 p1c1 = NonZeroInt(-5,5)
 p1c2 = RandInt(-5,5)
 p1c3 = RandInt(-5,5)
 
 p1f1 = p1c1*x + p1c2
 
 p1ans1 = (p1b1^p1c3-p1c2)/p1c1
 
 
 ###### Problem p2
 p2b1 = RandInt(2,7)
 
 p2c1 = NonZeroInt(-5,5)
 p2c2 = RandInt(-5,5)
 p2c3 = RandInt(-5,5)
 
 p2f1 = p2c1*x + p2c2
 
 p2ans1 = (p2b1^p2c3-p2c2)/p2c1
 
 
 ###### Problem p3
 p3b1 = RandInt(2,7)
 
 p3c1 = NonZeroInt(-5,5)
 p3c2 = RandInt(-5,5)
 p3c3 = RandInt(-5,5)
 
 p3f1 = p3c1*x + p3c2
 
 p3ans1 = (p3b1^p3c3-p3c2)/p3c1
 
 
 ###### Problem p4
 p4b1 = RandInt(2,7)
 
 p4c1 = NonZeroInt(-5,5)
 p4c2 = RandInt(-5,5)
 p4c3 = RandInt(-5,5)
 
 p4f1 = p4c1*x + p4c2
 
 p4ans1 = (p4b1^p4c3-p4c2)/p4c1
 
 
 
except:
 _st_.goboom(60)
_st_.blockend()
try:
 _st_.current_tex_line = 65
 _st_.inline(0, latex(p1b1))
except:
 _st_.goboom(65)
try:
 _st_.current_tex_line = 65
 _st_.inline(1, latex(p1f1))
except:
 _st_.goboom(65)
try:
 _st_.current_tex_line = 65
 _st_.inline(2, latex(p1c3))
except:
 _st_.goboom(65)
try:
 _st_.current_tex_line = 68
 _st_.inline(3, latex(p1ans1))
except:
 _st_.goboom(68)
try:
 _st_.current_tex_line = 75
 _st_.inline(4, latex(p2b1))
except:
 _st_.goboom(75)
try:
 _st_.current_tex_line = 75
 _st_.inline(5, latex(p2f1))
except:
 _st_.goboom(75)
try:
 _st_.current_tex_line = 75
 _st_.inline(6, latex(p2c3))
except:
 _st_.goboom(75)
try:
 _st_.current_tex_line = 78
 _st_.inline(7, latex(p2ans1))
except:
 _st_.goboom(78)
try:
 _st_.current_tex_line = 85
 _st_.inline(8, latex(p3b1))
except:
 _st_.goboom(85)
try:
 _st_.current_tex_line = 85
 _st_.inline(9, latex(p3f1))
except:
 _st_.goboom(85)
try:
 _st_.current_tex_line = 85
 _st_.inline(10, latex(p3c3))
except:
 _st_.goboom(85)
try:
 _st_.current_tex_line = 88
 _st_.inline(11, latex(p3ans1))
except:
 _st_.goboom(88)
try:
 _st_.current_tex_line = 95
 _st_.inline(12, latex(p4b1))
except:
 _st_.goboom(95)
try:
 _st_.current_tex_line = 95
 _st_.inline(13, latex(p4f1))
except:
 _st_.goboom(95)
try:
 _st_.current_tex_line = 95
 _st_.inline(14, latex(p4c3))
except:
 _st_.goboom(95)
try:
 _st_.current_tex_line = 98
 _st_.inline(15, latex(p4ans1))
except:
 _st_.goboom(98)
_st_.endofdoc()
